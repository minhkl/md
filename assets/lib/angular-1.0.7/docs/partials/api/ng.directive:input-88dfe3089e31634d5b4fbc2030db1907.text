// Angular Rails Template
// source: app/assets/javascripts/lib/angular-1.0.7/docs/partials/api/ng.directive:input.text.html

angular.module("templates").run(["$templateCache", function($templateCache) {
  $templateCache.put("lib/angular-1.0.7/docs/partials/api/ng.directive:input.html", '<h1><code ng:non-bindable="">input [text]</code>\n<span class="hint">(directive in module <code ng:non-bindable="">ng</code>\n)</span>\n</h1>\n<div><a href="http://github.com/angular/angular.js/edit/master/src/ng/directive/input.js" class="improve-docs btn btn-primary">Improve this doc</a><h2 id="Description">Description</h2>\n<div class="description"><p>Standard HTML text input with angular data binding.</p></div>\n<h2 id="Usage">Usage</h2>\n<div class="usage"><pre class="prettyprint linenums">&lt;input type="text"\n       ng-model="{string}"\n       [name="{string}"]\n       [required]\n       [ng-required="{string}"]\n       [ng-minlength="{number}"]\n       [ng-maxlength="{number}"]\n       [ng-pattern="{string}"]\n       [ng-change="{string}"]&gt;</pre>\n<h3 id="Parameters">Parameters</h3>\n<ul class="parameters"><li><code ng:non-bindable="">ngModel – {string} – </code>\n<p>Assignable angular expression to data-bind to.</p></li>\n<li><code ng:non-bindable="">name<i>(optional)</i> – {string=} – </code>\n<p>Property name of the form under which the control is published.</p></li>\n<li><code ng:non-bindable="">required<i>(optional)</i> – {string=} – </code>\n<p>Adds <code>required</code> validation error key if the value is not entered.</p></li>\n<li><code ng:non-bindable="">ngRequired<i>(optional)</i> – {string=} – </code>\n<p>Adds <code>required</code> attribute and <code>required</code> validation constraint to\nthe element when the ngRequired expression evaluates to true. Use <code>ngRequired</code> instead of\n<code>required</code> when you want to data-bind to the <code>required</code> attribute.</p></li>\n<li><code ng:non-bindable="">ngMinlength<i>(optional)</i> – {number=} – </code>\n<p>Sets <code>minlength</code> validation error key if the value is shorter than\nminlength.</p></li>\n<li><code ng:non-bindable="">ngMaxlength<i>(optional)</i> – {number=} – </code>\n<p>Sets <code>maxlength</code> validation error key if the value is longer than\nmaxlength.</p></li>\n<li><code ng:non-bindable="">ngPattern<i>(optional)</i> – {string=} – </code>\n<p>Sets <code>pattern</code> validation error key if the value does not match the\nRegExp pattern expression. Expected value is <code>/regexp/</code> for inline patterns or <code>regexp</code> for\npatterns defined as scope expressions.</p></li>\n<li><code ng:non-bindable="">ngChange<i>(optional)</i> – {string=} – </code>\n<p>Angular expression to be executed when input changes due to user\ninteraction with the input element.</p></li>\n</ul>\n</div>\n<h2 id="Example">Example</h2>\n<div class="example"><h4>Source</h4>\n<div source-edit="" source-edit-deps="angular.js script.js" source-edit-html="index.html-104" source-edit-css="" source-edit-js="script.js-103" source-edit-unit="" source-edit-scenario="scenario.js-105"></div>\n<div class="tabbable"><div class="tab-pane" title="index.html">\n<pre class="prettyprint linenums" ng-set-text="index.html-104" ng-html-wrap=" angular.js script.js"></pre>\n<script type="text/ng-template" id="index.html-104">\n \n <form name="myForm" ng-controller="Ctrl">\n   Single word: <input type="text" name="input" ng-model="text"\n                       ng-pattern="word" required>\n   <span class="error" ng-show="myForm.input.$error.required">\n     Required!</span>\n   <span class="error" ng-show="myForm.input.$error.pattern">\n     Single word only!</span>\n\n   <tt>text = {{text}}</tt><br/>\n   <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n   <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n   <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n  </form>\n</script>\n</div>\n<div class="tab-pane" title="script.js">\n<pre class="prettyprint linenums" ng-set-text="script.js-103"></pre>\n<script type="text/ng-template" id="script.js-103">\n   function Ctrl($scope) {\n     $scope.text = \'guest\';\n     $scope.word = /^\\w*$/;\n   }\n </script>\n</div>\n<div class="tab-pane" title="End to end test">\n<pre class="prettyprint linenums" ng-set-text="scenario.js-105"></pre>\n<script type="text/ng-template" id="scenario.js-105">\n  it(\'should initialize to model\', function() {\n    expect(binding(\'text\')).toEqual(\'guest\');\n    expect(binding(\'myForm.input.$valid\')).toEqual(\'true\');\n  });\n\n  it(\'should be invalid if empty\', function() {\n    input(\'text\').enter(\'\');\n    expect(binding(\'text\')).toEqual(\'\');\n    expect(binding(\'myForm.input.$valid\')).toEqual(\'false\');\n  });\n\n  it(\'should be invalid if multi word\', function() {\n    input(\'text\').enter(\'hello world\');\n    expect(binding(\'myForm.input.$valid\')).toEqual(\'false\');\n  });\n</script>\n</div>\n</div><h4>Demo</h4>\n<div class="well doc-example-live" ng-embed-app="" ng-set-html="index.html-104" ng-eval-javascript="script.js-103"></div></div>\n</div>')
}]);

